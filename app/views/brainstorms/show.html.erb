<%= render 'nav' %>
<%= render 'change_name_popup' %>
<div style="display:none" id="ideation">
  <%= render 'ideate' %>
</div>
<div style="display:none" id="setup">
  <div id="setup_participant">
    <%= render 'setup_participant' %>
  </div>
  <div id="setup_facilitator">
    <%= render 'setup_facilitator' %>
  </div>
</div>

<div style="display:none" id="time_is_up">
  <%= render 'time_is_up' %>
</div>
<div style="display:none" id="vote">
  <%= render 'vote' %>
</div>
<div style="display:none" id="voting_done">
  <%= render 'voting_done' %>
  <%= render 'send_email_popup' %>
</div>

<script>
  currentUser = {
    id: '<%= @session_id %>',
    currentUserName: '<%= @current_user_name %>',
    facilitator: '<%= @is_user_facilitator %>',
    votesCastIdeas: <%= @idea_votes %>,
    votesCastIdeaBuilds: <%= @idea_build_votes %>,
    userIsDoneVoting: '<%= @user_is_done_voting %>'
  };

  brainstormStore = {
    state: '<%= @state %>',
    maxVotesPerUser: '<%= ApplicationController::MAX_VOTES_PER_USER %>'
  };

  const openModalToSetName = () => {
    if (!currentUser.currentUserName || currentUser.currentUserName == "Anonymous Brainstormer") {
      document.getElementById("modalContainer").setAttribute("style", "display': block");
      document.getElementById("modalContainer").setAttribute("x-data", "{ 'showModal': true }");
      document.getElementById("set_user_name_user_name").setAttribute("value", createRandomUserName());
    }
  }

  const createRandomUserName = () => {
    const adjectives = ["Sleeping", "Hungry", "Purple", "Hairy", "Wet", "Hungarian", "Australian", "Cross-eyed", "Mind-reading", "Fierce", "Wig-wearing", "Busy", "Bingo-playing", "Talking", "Smart", "Cool", "Amazing", "Happy", "Lovely", "Tomb Raiding", "Self-aware", "Flying", "Bald", "The Best", "Space-exploring", "To-the-point", "Forgetful", "Visionary", "Well-behaved", "Totally Awesome", "Hilarious", "Mild", "Charming"]
    const nouns = ["Tiger", "Turtle", "Cat", "Sloth", "Hedgehog", "Human", "Space Explorer", "Mouse", "Hamster", "Tea Pot", "Alien", "Traveller", "Bear", "Fish", "Donkey", "Horse", "Zebra", "Lion", "Otter", "Spider", "Architect", "Surgeon", "Manager", "Auditor", "Friend", "Coffee Cup", "Thief", "Beer", "Computer", "Super Hero"]

    let adjective = adjectives[Math.floor(Math.random() * adjectives.length)];
    let noun = nouns[Math.floor(Math.random() * nouns.length)];

    return `${adjective} ${noun}`
  }

  const openSendEmailModal = () => {
    document.getElementById("emailModalContainer").setAttribute("x-data", "{ 'showEmailModal': true }")
  }

  const showCurrentUser = () => {
    let currentUserBadge = document.getElementById(currentUser.id)
    let currentUserBadgesWrapper = document.getElementById("user-list")
    currentUserBadge.parentNode.appendChild(currentUserBadge);
    currentUserBadge.lastChild.remove()
    currentUserBadge.lastChild.remove()
    currentUserBadge.classList.add("bg-black", "cursor-pointer")
    currentUserBadge.firstChild.classList.add("bg-white", "text-black")
    currentUserBadge.firstChild.classList.remove("bg-purply", "bg-greeny", "bg-yellowy", "bg-reddy")
    currentUserBadge.lastChild.classList.add("bg-black")
    currentUserBadge.lastChild.classList.remove("bg-purply", "bg-greeny", "bg-yellowy", "bg-reddy")

    doneDivForCurrentUser = document.getElementById(`user-done-${currentUser.id}`)
    doneDivForCurrentUser.parentNode.appendChild(doneDivForCurrentUser);

    currentUserBadge.onclick = () => {
      document.getElementById("modalContainer").setAttribute("style", "display': block");
      document.getElementById("modalContainer").setAttribute("x-data", "{ 'showModal': true }")
    }
  }

  const showTimeIsUpModal = () => {
    document.getElementById("modalContainer").setAttribute("x-data", "{ 'timeIsUpModal': true }")
  }

  const setCurrentUserName = (name) => {
    currentUser.currentUserName = name
  }

  const copyAction = (value) => {
    let tempInput = document.createElement("input");
    tempInput.style = "position: absolute; left: -1000px; top: -1000px";
    tempInput.value = value;
    document.body.appendChild(tempInput);
    tempInput.select();
    document.execCommand("copy");
    document.body.removeChild(tempInput);
    let tooltip = document.getElementById("myTooltip");
    tooltip.innerHTML = "Copied!";
  }

  const copyToken = (value) => {
    let tempInput = document.createElement("input");
    tempInput.style = "position: absolute; left: -1000px; top: -1000px";
    tempInput.value = value;
    document.body.appendChild(tempInput);
    tempInput.select();
    document.execCommand("copy");
    document.body.removeChild(tempInput);
    let tooltip = document.getElementById("tooltipToken");
    tooltip.innerHTML = "Copied!";
  }

  const getURL = () => {
    return window.location.href;
  }

  const getToken = () => {
    return window.location.pathname.replace("/", "")
  }

  const outFunc = () => {
    var tooltip = document.getElementById("myTooltip");
    tooltip.innerHTML = "Copy to clipboard";
  }

  const tokenOutFunc = () => {
    var tooltip = document.getElementById("tooltipToken");
    tooltip.innerHTML = "Copy to clipboard";
  }

  if (currentUser.userIsDoneVoting == "false") {
    document.getElementById("done-button").innerHTML = "DONE"
  } else if (currentUser.userIsDoneVoting == "true") {
    document.getElementById("done-button").innerHTML = "CHANGE VOTES"
  }
</script>

<%= javascript_pack_tag 'user_badge' %>
<%= javascript_pack_tag 'change_view_based_on_state' %>
<%= javascript_pack_tag 'validations' %>
<%= javascript_pack_tag 'show' %>