<%= render 'nav' %>
<div id="ideation">
  <%= render 'ideate' %>
</div>
<div id="setup">
  <div id="setup_participant">
    <%= render 'setup_participant' %>
  </div>
  <div id="setup_facilitator">
    <%= render 'setup_facilitator' %>
  </div>
</div>

<div id="time_is_up">
  <%= render 'time_is_up' %>
</div>
<div id="vote">
  <%= render 'vote' %>
</div>
<div id="voting_done">
  <%= render 'voting_done' %>
</div>

<script>
  currentUser = {
    id: '<%= @session_id %>',
    name: false,
    currentUserName: '<%= @current_user_name %>',
    facilitator: '<%= @is_user_facilitator %>',
    votesCastIdeas: '<%= @idea_votes %>',
    votesCastIdeaBuilds: '<%= @idea_build_votes %>'
  };

  brainstormStore = {
    state: '<%= @state %>'
  };

  const openModalToSetName = () => {
    if (!currentUser.name) {
      document.getElementById("modalContainer").setAttribute("x-data", "{ 'showModal': true }")
    }
  }

  const showCurrentUser = () => {
    let currentUserElement = document.getElementById(currentUser.id)
    currentUserElement.parentNode.appendChild(currentUserElement)
    let wrapper = document.createElement('div');
    currentUserElement.parentNode.insertBefore(wrapper, currentUserElement);
    wrapper.appendChild(currentUserElement);
    wrapper.classList.add("bg-black", "cursor-pointer")
    currentUserElement.classList.add("bg-white", "text-black")
    currentUserElement.classList.remove("bg-purply", "bg-greeny", "bg-yellowy", "bg-reddy")

    currentUserElement.parentNode.onclick = () => {
      document.getElementById("modalContainer").setAttribute("x-data", "{ 'showModal': true }")
    }
  }

  const showTimeIsUpModal = () => {
    document.getElementById("modalContainer").setAttribute("x-data", "{ 'timeIsUpModal': true }")
  }

  const setCurrentUserName = (name) => {
    currentUser.currentUserName = name
  }

  const copyAction = (value) => {
    let tempInput = document.createElement("input");
    tempInput.style = "position: absolute; left: -1000px; top: -1000px";
    tempInput.value = value;
    document.body.appendChild(tempInput);
    tempInput.select();
    document.execCommand("copy");
    document.body.removeChild(tempInput);
    let tooltip = document.getElementById("myTooltip");
    tooltip.innerHTML = "Copied!";
  }

  const copyToken = (value) => {
    let tempInput = document.createElement("input");
    tempInput.style = "position: absolute; left: -1000px; top: -1000px";
    tempInput.value = value;
    document.body.appendChild(tempInput);
    tempInput.select();
    document.execCommand("copy");
    document.body.removeChild(tempInput);
    let tooltip = document.getElementById("tooltipToken");
    tooltip.innerHTML = "Copied!";
  }

  const getURL = () => {
    return window.location.href;
  }

  const getToken = () => {
    return window.location.pathname.replace("/", "")
  }

  const outFunc = () => {
    var tooltip = document.getElementById("myTooltip");
    tooltip.innerHTML = "Copy to clipboard";
  }

  const tokenOutFunc = () => {
    var tooltip = document.getElementById("tooltipToken");
    tooltip.innerHTML = "Copy to clipboard";
  }
</script>

<%= javascript_pack_tag 'change_view_based_on_state' %>
<%= javascript_pack_tag 'show' %>