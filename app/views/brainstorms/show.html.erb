<div>
  <%= render 'nav' %>
  <div id="modalContainer" class="flex flex-row" x-data="{ 'showModal': false }" @keydown.escape="showModal = false">
    <div class="flex-col flex w-full items-start">
      <div class="flex-col flex w-3/4">
        <h1 class="mx-16 p-3 text-5xl text-white font-bold uppercase bg-blurple leading-tight"><%=@brainstorm.problem %></h1>
        <%= form_for(@idea, remote: true, html: { autocomplete: "off", class: "bg-light-gray p-6 m-16" } ) do |f| %>
        <h2 class="italic text-2xl font-semibold">Idea</h2>
        <div class="field mt-8">
          <%= f.text_area :text, class:"w-full bg-white focus:outline-none border-solid border-black border-2 py-2 px-4 block w-full appearance-none leading-normal" %>
        </div>
        <%= f.hidden_field :brainstorm_id, :value => @brainstorm.id %>

        <p id="characterCount" class="text-xs mt-1 mb-4 ml-auto justify-end flex"></p>

        <button id="addIdeaButton" type=submit class="modal-close w-full my-1 bg-blurple focus:outline-none text-white font-bold py-3 px-4 rounded cursor-pointer" @click="showModal = false">Add idea</button>
        <% end %>
      </div>

      <div class="flex flex-wrap justify-start ml-16" id="ideas">
        <% @ideas.each do |idea| %>

        <div class="idea-card h-48 w-64 px-4 pt-6 pb-1 my-shadow my-4 mr-8 flex flex-col items-start justify-between italic font-bold bg-yellowy" id=<%= idea.id %>>

          <h2 class="text-blurple text-xl">#<%=idea.number%></h2>


          <p><%=idea.text %></p>

          <div class="flex flex-row self-end items-center">
            <p class="likes">0</p>
            <div class="w-4 h-4 heart-gray"></div>
          </div>
        </div>
        <% end %>
      </div>

    </div>
    <div class="flex-col flex">
      <div class="flex flex-col items-center w-80 bg-white my-shadow mr-16 p-6">
        <h2 class="italic font-semibold text-xl text-blurple">Time</h2>
        <div class="text-3xl font-bold bg-black text-white rounded-full h-40 w-40 flex items-center justify-center my-4">
          <p id="timeDisplay">10:00</p>
        </div>
        <%= link_to "Start timer", start_timer_brainstorm_path(@brainstorm.token), remote: true, method: :post, id: "startTimer", class: "bg-black text-white p-2" %>
        <div class="bg-wine text-white font-bold w-full mt-8">
          <div class="flex items-end justify-around mt-8 pt-16 pb-4">
            <p class="uppercase italic text-lg">ideas</p>
            <p class="text-6xl leading-none" id="ideasCount"><%= @ideas.count %></p>
          </div>
          <div class="p-4 text-center text-sm bg-wine-light">GOAL: 20 ideas in 10 minutes</div>
        </div>

      </div>

      <div class="w-80 items-center bg-white my-shadow mt-8 mr-16 p-6">
        <button class="bg-greeny text-white text-center text-2xl font-semibold py-2 w-full">
          SHARE LINK
        </button>
      </div>
    </div>

    <!--Overlay-->
    <div class="" style="background-color: rgba(0,0,0,0.5)" x-show="showModal" :class="{ 'absolute inset-0 z-10 flex items-center justify-center': showModal }">
      <!--Dialog-->
      <div class="bg-white w-11/12 md:max-w-md mx-auto rounded shadow-lg py-4 text-left px-6" x-show="showModal" @click.away="showModal = false">

        <!--Title-->
        <div class="flex justify-between items-center pb-3">
          <p class="text-2xl font-bold">What is your name?</p>
          <div class="cursor-pointer z-50" @click="showModal = false">
            <svg class="fill-current text-black" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18">
              <path d="M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z"></path>
            </svg>
          </div>
        </div>

        <!-- content -->
        <%= form_for :brainstorm, url: set_user_name_brainstorm_path(@brainstorm.token), remote: true do |f| %>

        <div class="field mt-8">
          <%= text_field_tag "user_name", "", class:"w-full bg-white focus:outline-none focus:shadow-outline border border-gray-300 rounded-lg py-2 px-4 block w-full appearance-none leading-normal" %>
        </div>
        <%= hidden_field_tag "session_id", @session_id %>

        <button type=submit class="modal-close w-full my-1 bg-blurple hover:bg-plum-700 text-white font-bold py-3 px-4 rounded cursor-pointer" @click="showModal = false">Go!</button>
        <% end %>
      </div>
      <!--/Dialog -->
    </div><!-- /Overlay -->
  </div>
</div>
<div id="idHolder" data-id="<%= @session_id %>"></div>

<script>
  let timerStopped = false;
  const p = document.getElementById("characterCount");
  const inputField = document.getElementById("idea_text");
  const maxCharacters = 110
  inputField.maxLength = maxCharacters

  document.getElementById("addIdeaButton").addEventListener(
    "click",
    function() {
      p.innerHTML = inputField.value.length + "/" + maxCharacters
      p.classList.remove("text-red-400")
      p.textContent = "0" + "/" + maxCharacters
    }
  )

  p.innerHTML = inputField.value.length + "/" + maxCharacters

  inputField.addEventListener(
    "input",
    function() {
      p.textContent = inputField.value.length + "/" + maxCharacters
      if (inputField.value.length >= maxCharacters - 2) {
        p.classList.add("text-red-400")
      } else if (inputField.value.length <= maxCharacters - 2) {
        p.classList.remove("text-red-400")
      }
    }
  );

  window.onclick = e => {
    e = event.srcElement;
    if (e.className.indexOf("idea-card") != -1) {

      let likeElement = document.getElementById(e.id).querySelector(".likes")
      let numberOfLikes = Number(likeElement.innerHTML);

      likeElement.innerHTML = numberOfLikes + 1

      if (numberOfLikes == 0) {
        likeElement.nextElementSibling.classList.add("heart-red");
        likeElement.nextElementSibling.classList.remove("heart-gray");
      }
    }
  }

  const currentUserId = document.getElementById("idHolder").dataset.id;


  const openModalToSetName = () => {
    if (document.getElementById("idHolder").dataset.noName == "true") {
      document.getElementById("modalContainer").setAttribute("x-data", "{ 'showModal': true }")
    }
  }

  const showCurrentUser = () => {
    let currentUserElement = document.getElementById(currentUserId)

    currentUserElement.parentNode.appendChild(currentUserElement)
    let wrapper = document.createElement('div');
    currentUserElement.parentNode.insertBefore(wrapper, currentUserElement);
    wrapper.appendChild(currentUserElement);
    wrapper.classList.add("bg-black")
    currentUserElement.classList.add("bg-white", "text-black")
    currentUserElement.classList.remove("bg-purply", "bg-greeny", "bg-yellowy", "bg-reddy")
  }
</script>